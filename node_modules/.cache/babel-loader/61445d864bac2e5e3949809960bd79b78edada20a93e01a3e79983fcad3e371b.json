{"ast":null,"code":"export default function Quicksort(array) {\n  //calling original array\n  var animation = [];\n  if (array.length <= 1) {\n    return;\n  }\n  quicksortHelper(array, 0, array.length - 1, animation);\n  print(array);\n  return animation; //returning animations for visualization\n}\n_c = Quicksort;\nfunction quicksortHelper(arr, s, e, animation) {\n  if (s >= e) {\n    return;\n  }\n  var p = partition(arr, s, e, animation); //function to divide array in two parts\n  quicksortHelper(arr, s, p - 1, animation);\n  quicksortHelper(arr, p + 1, e, animation);\n}\nfunction partition(array, s, e, animation) {\n  var pivot = array[e]; //select last element of array as pivot\n  var pindex = s;\n  for (var i = s; i < e; i++) {\n    animation.push([\"comparison1\", i, e]); //Comparing value at i and e so push them to change their color\n    animation.push([\"comparison2\", i, e]); //Comparing them again to turn them into secondary color\n    if (array[i] <= pivot) {\n      animation.push([\"comparison1\", i, pindex]);\n      animation.push([\"swap\", i, array[pindex]]);\n      animation.push([\"swap\", pindex, array[i]]);\n      animation.push([\"comparison2\", i, pindex]);\n      var _ref = [array[pindex], array[i]];\n      array[i] = _ref[0];\n      array[pindex] = _ref[1];\n      pindex++;\n    }\n  }\n  animation.push([\"comparison1\", e, pindex]);\n  animation.push([\"swap\", e, array[pindex]]);\n  animation.push([\"swap\", pindex, array[e]]);\n  animation.push([\"comparison2\", e, pindex]);\n  var _ref2 = [array[e], array[pindex]];\n  array[pindex] = _ref2[0];\n  array[e] = _ref2[1];\n  return pindex;\n}\nfunction print(array) {\n  console.log(array);\n}\nvar _c;\n$RefreshReg$(_c, \"Quicksort\");","map":{"version":3,"names":["Quicksort","array","animation","length","quicksortHelper","print","_c","arr","s","e","p","partition","pivot","pindex","i","push","_ref","_ref2","console","log","$RefreshReg$"],"sources":["C:/Users/18253/OneDrive/Documents/GitHub/Sorting-Visualizer/src/SortingAlgorithms/QuickSort.js"],"sourcesContent":["export default function Quicksort(array) {\r\n  //calling original array\r\n  const animation = [];\r\n  if (array.length <= 1) {\r\n    return;\r\n  }\r\n  quicksortHelper(array, 0, array.length - 1, animation);\r\n  print(array);\r\n  return animation; //returning animations for visualization\r\n}\r\n\r\nfunction quicksortHelper(arr, s, e, animation) {\r\n  if (s >= e) {\r\n    return;\r\n  }\r\n  let p = partition(arr, s, e, animation); //function to divide array in two parts\r\n  quicksortHelper(arr, s, p - 1, animation);\r\n  quicksortHelper(arr, p + 1, e, animation);\r\n}\r\n\r\nfunction partition(array, s, e, animation) {\r\n  var pivot = array[e]; //select last element of array as pivot\r\n  var pindex = s;\r\n  for (let i = s; i < e; i++) {\r\n    animation.push([\"comparison1\", i, e]); //Comparing value at i and e so push them to change their color\r\n    animation.push([\"comparison2\", i, e]); //Comparing them again to turn them into secondary color\r\n    if (array[i] <= pivot) {\r\n      animation.push([\"comparison1\", i, pindex]);\r\n      animation.push([\"swap\", i, array[pindex]]);\r\n      animation.push([\"swap\", pindex, array[i]]);\r\n      animation.push([\"comparison2\", i, pindex]);\r\n      [array[i], array[pindex]] = [array[pindex], array[i]];\r\n      pindex++;\r\n    }\r\n  }\r\n  animation.push([\"comparison1\", e, pindex]);\r\n  animation.push([\"swap\", e, array[pindex]]);\r\n  animation.push([\"swap\", pindex, array[e]]);\r\n  animation.push([\"comparison2\", e, pindex]);\r\n  [array[pindex], array[e]] = [array[e], array[pindex]];\r\n  return pindex;\r\n}\r\n\r\nfunction print(array) {\r\n  console.log(array);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}