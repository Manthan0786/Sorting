{"ast":null,"code":"export default function Mergesort(array){//calling original array\nvar animation=[];if(array.length<=1){return array;}mergesortHelper(array,0,array.length-1,animation);return animation;//returning animations for visualization\n}function mergesortHelper(array,startindex,endindex,animation){if(startindex>=endindex){return;}var mid=Math.floor((startindex+endindex)/2);//dividing array in two parts\nmergesortHelper(array,startindex,mid,animation);// recrusion steps\nmergesortHelper(array,mid+1,endindex,animation);merge(array,startindex,mid,endindex,animation);// merging sorted arrays\n}function merge(array,startindex,mid,endindex,animation){var l=startindex;var k=startindex;var r=mid+1;var mainArray=[];while(l<=mid&&r<=endindex){animation.push([l,r]);//Comparing value at ith and jth index so push them to change their color\nanimation.push([l,r]);//By changing color we imply that we are comparing those two values and then again we should revert back to other color, so push them again\nif(array[l]<=array[r]){//if condition satisfies,\nanimation.push([k,array[l]]);// We overwrite the value at index k in the new array with the\nmainArray[k]=array[l];// value at index l in the original array.\nk++;l++;}else{animation.push([k,array[r]]);// We overwrite the value at index k in the new array with the\nmainArray[k]=array[r];// value at index r in the original array.\nk++;r++;}}while(l<=mid){animation.push([l,l]);//We are comparing thses two values and changing their color\nanimation.push([l,l]);//comparing again and revert them to seconday color\nanimation.push([k,array[l]]);mainArray[k]=array[l];k++;l++;}while(r<=endindex){animation.push([r,r]);//We are comparing thses two values and changing their color\nanimation.push([r,r]);//comparing again and revert them to seconday color\nanimation.push([k,array[r]]);mainArray[k]=array[r];k++;r++;}for(var i=startindex;i<=endindex;i++){//again pushing values of new array to original array\narray[i]=mainArray[i];}}","map":{"version":3,"names":["Mergesort","array","animation","length","mergesortHelper","startindex","endindex","mid","Math","floor","merge","l","k","r","mainArray","push","i"],"sources":["C:/Users/18253/OneDrive/Documents/GitHub/Sorting-Visualizer/src/SortingAlgorithms/MergeSort.js"],"sourcesContent":["export default function Mergesort(array) {\r\n  //calling original array\r\n  const animation = [];\r\n  if (array.length <= 1) {\r\n    return array;\r\n  }\r\n  mergesortHelper(array, 0, array.length - 1, animation);\r\n  return animation; //returning animations for visualization\r\n}\r\n\r\nfunction mergesortHelper(array, startindex, endindex, animation) {\r\n  if (startindex >= endindex) {\r\n    return;\r\n  }\r\n  const mid = Math.floor((startindex + endindex) / 2); //dividing array in two parts\r\n  mergesortHelper(array, startindex, mid, animation); // recrusion steps\r\n  mergesortHelper(array, mid + 1, endindex, animation);\r\n  merge(array, startindex, mid, endindex, animation); // merging sorted arrays\r\n}\r\n\r\nfunction merge(array, startindex, mid, endindex, animation) {\r\n  let l = startindex;\r\n  let k = startindex;\r\n  let r = mid + 1;\r\n  let mainArray = [];\r\n  while (l <= mid && r <= endindex) {\r\n    animation.push([l, r]); //Comparing value at ith and jth index so push them to change their color\r\n    animation.push([l, r]); //By changing color we imply that we are comparing those two values and then again we should revert back to other color, so push them again\r\n    if (array[l] <= array[r]) {\r\n      //if condition satisfies,\r\n      animation.push([k, array[l]]); // We overwrite the value at index k in the new array with the\r\n      mainArray[k] = array[l]; // value at index l in the original array.\r\n      k++;\r\n      l++;\r\n    } else {\r\n      animation.push([k, array[r]]); // We overwrite the value at index k in the new array with the\r\n      mainArray[k] = array[r]; // value at index r in the original array.\r\n      k++;\r\n      r++;\r\n    }\r\n  }\r\n  while (l <= mid) {\r\n    animation.push([l, l]); //We are comparing thses two values and changing their color\r\n    animation.push([l, l]); //comparing again and revert them to seconday color\r\n    animation.push([k, array[l]]);\r\n    mainArray[k] = array[l];\r\n    k++;\r\n    l++;\r\n  }\r\n  while (r <= endindex) {\r\n    animation.push([r, r]); //We are comparing thses two values and changing their color\r\n    animation.push([r, r]); //comparing again and revert them to seconday color\r\n    animation.push([k, array[r]]);\r\n    mainArray[k] = array[r];\r\n    k++;\r\n    r++;\r\n  }\r\n\r\n  for (var i = startindex; i <= endindex; i++) {\r\n    //again pushing values of new array to original array\r\n    array[i] = mainArray[i];\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}